{"version":3,"sources":["../src/CheckboxList.js"],"names":[],"mappings":"AAAA;;;;AAEA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,IAAI,UAAU,QAAQ,iBAAR,CAAd;;AAGA,IAAI,WAAW,QAAQ,QAAvB;;AAEA,SAAS,aAAT,CAAwB,KAAxB,EAA+B,YAA/B,EAA6C;AAC3C,SAAO,MAAM,GAAN,CAAU,UAAC,GAAD,EAAS;AACxB,WACE;AAAC,cAAD;AAAA,QAAU,KAAK,IAAI,KAAnB,EAA0B,SAAS,IAAI,OAAvC,EAAgD,OAAO,IAAI,KAA3D,EAAkE,UAAU,YAA5E;AACG,UAAI;AADP,KADF;AAKD,GANM,CAAP;AAOD;;AAED,SAAS,IAAT,GAAiB;AACf,QAAM,IAAI,KAAJ,CAAU,uKAAV,CAAN;AACD;;AAED,IAAI,eAAe,MAAM,WAAN,CAAkB;AAAA;;AACnC,aAAW;AACT,WAAO,MAAM,SAAN,CAAgB,OAAhB,CACL,MAAM,SAAN,CAAgB,KAAhB,CAAsB;AACpB,aAAO,MAAM,SAAN,CAAgB,MAAhB,CAAuB,UADV;AAEpB,eAAS,MAAM,SAAN,CAAgB;AAFL,KAAtB,CADK,EAKL,UANO;AAOT,cAAU,MAAM,SAAN,CAAgB,IAAhB,CAAqB,UAAW;AAPjC,GADwB;AAUnC,gBAAc,sBAAU,CAAV,EAAa;AACzB,QAAI,EAAE,WAAN,CAAkB;AAClB,MAAE,cAAF,GAAmB;;AAEnB,aAAS,QAAT,CAAmB,GAAnB,EAAwB;AACtB,UAAI,OAAO,GAAP,KAAe,SAAnB,EAA8B;AAC9B,UAAI,QAAQ,EAAE,MAAF,CAAS,OAArB,EAA8B,EAAE,cAAF,GAAmB;AACjD,QAAE,MAAF,CAAS,OAAT,GAAmB,GAAnB;AACD;;AAED,QAAI,iBAAiB,KAAK,KAAL,CAAW,QAAX,CAAoB,EAAE,MAAF,CAAS,KAA7B,EAAoC,EAAE,MAAF,CAAS,OAA7C,EAAsD,QAAtD,CAArB;;AAEA,QAAI,OAAO,cAAP,KAA0B,SAA9B,EAAyC;AACvC,UAAI,mBAAmB,EAAE,MAAF,CAAS,OAAhC,EAAyC,EAAE,cAAF,GAAmB;AAC7D,KAFD,MAEO,IAAI,QAAO,cAAP,yCAAO,cAAP,OAA0B,QAA9B,EAAwC;AAAE;AAC/C,UAAI,eAAe,IAAnB,EAAyB,OAAO,eAAe,IAAf,CAAoB,QAApB,CAAP,CAAzB,KACK;AACN,KAHM,MAGA,CAAE,CAAC;AACX,GA5BkC;AA6BnC,UAAQ,kBAAY;AAClB,WACE;AAAA;AAAA;AACG,oBAAc,KAAK,KAAL,CAAW,KAAX,IAAoB,EAAlC,EAAsC,KAAK,YAA3C;AADH,KADF;AAKD;AAnCkC,CAAlB,CAAnB;;AAsCA,OAAO,OAAP,GAAiB,YAAjB","file":"CheckboxList.js","sourcesContent":["'use strict'\n\nlet React = require('react')\nlet ReactBS = require('react-bootstrap')\n\n\nlet Checkbox = ReactBS.Checkbox\n\nfunction getCheckboxes (boxes, handleChange) {\n  return boxes.map((box) => {\n    return (\n      <Checkbox key={box.value} checked={box.checked} value={box.value} onChange={handleChange}>\n        {box.value}\n      </Checkbox>\n    )\n  })\n}\n\nfunction fail () {\n  throw new Error('CheckboxList onCheck prop must either return a boolean, accept a callback as it\\' second parameter that returns a bool, or return a promise the resolved to a boolean')\n}\n\nlet CheckboxList = React.createClass({\n  propTypes: {\n    boxes: React.PropTypes.arrayOf(\n      React.PropTypes.shape({\n        value: React.PropTypes.string.isRequired,\n        checked: React.PropTypes.bool\n      })\n    ).isRequired,\n    onChange: React.PropTypes.func.isRequired // a function taking two arguments, value and checked, must return a bool or a promise resolving to a bool, or accept a callback as a third argument, calling it with a bool about the state of the checkbox clicked\n  },\n  handleChange: function (e) {\n    e = e.nativeEvent // so the event will persist across the asynchronous callback\n    e.preventDefault() // so the box doesn't change it's checked prop automatically\n\n    function callback (res) {\n      if (typeof res !== 'boolean') fail()\n      if (res !== e.target.checked) e.preventDefault() // don't let checkbox toggle if callback didn't change status\n      e.target.checked = res\n    }\n\n    let parentResponse = this.props.onChange(e.target.value, e.target.checked, callback)\n\n    if (typeof parentResponse === 'boolean') {\n      if (parentResponse !== e.target.checked) e.preventDefault() // don't let checkbox toggle if response didn't change status\n    } else if (typeof parentResponse === 'object') { // check for promise\n      if (parentResponse.then) return parentResponse.then(callback)\n      else fail()\n    } else {} // this.props.onChange should call the callback provided\n  },\n  render: function () {\n    return (\n      <div>\n        {getCheckboxes(this.props.boxes || [], this.handleChange)}\n      </div>\n    )\n  }\n})\n\nmodule.exports = CheckboxList\n"]}